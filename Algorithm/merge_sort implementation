function merge(arr, start, mid, end) {
    let i = start;
    let j = mid+1;
    let aux = [];
    
    while((i <= mid) && (j <= end)) {
        if (arr[i] <= arr[j]) aux.push(arr[i++]);
        else  aux.push(arr[j]++);
    }
    
    while (i <= mid) {
        aux.push(arr[i++]);
    }
    
    while (j <= end) {
        aux.push(arr[j++]);
    }
    
    for (let i = 0; i < aux.length; i++) {
        arr[start + i] = aux[i];
    }
    return;
}

function helper_sort(arr, start, end) {
    if (start === end) return;
    
    let midPos = start + Math.floor((end-start)/2);
    
    helper_sort(arr, start, midPos);
    helper_sort(arr, midPos+1, end);
    
    merge(arr, start, midPos, end);
    
    return;
}


function merge_sort(arr) {
    helper_sort(arr, 0, arr.length - 1);
    return arr;
}

merge_sort([7,6,5,4,9,2,5]);//?



//======================================================
function merge_sort(arr) {
    if (arr.length == 1) {
      return arr;
    }
    let start = 0, end = arr.length, mid = Math.floor((start+end)/2);
    let left = arr.slice(start, mid), right = arr.slice(mid, end);

    let arr1 = merge_sort(left)

    let arr2 = merge_sort(right)
 
    return merge(arr1, arr2);
 }

function merge(arr1, arr2){

    let i = 0, j = 0, res = [];
    while(i <=arr1.length && j < arr2.length){
        if(arr1[i] <= arr2[j])res.push(arr1[i++]); 
        else res.push(arr2[j++]);
    }

    while(i < arr1.length) res.push(arr1[i++]);
    while(j < arr2.length) res.push(arr2[j++]);
    return res;
}

merge_sort([7,6,5,4,9,2,5]); //?